{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","maxPagesCount","Math","ceil","pages","isPrevPageDisabled","isNextPageDisabled","className","cn","disabled","href","onClick","map","page","active","items","App","useState","setCurrentPage","setPerPage","length","itemToIndex","itemFrom","itemTo","paginationItems","id","value","onChange","e","target","option","onSelect","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCGIG,EAA8B,SAAC,GAOtC,IALFC,EAKC,EALDA,MACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,YACAC,EAEC,EAFDA,aAGIC,EAAwBC,KAAKC,KAAKN,EAAQC,GAC1CM,EAAkBd,EAAW,EAAGW,GAEhCI,EAA8C,IAAhBN,EAC9BO,EAA8BP,IAAgBE,EAcpD,OACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAG,YAChB,CAAEC,SAAUJ,IADd,SAGE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAtBc,WACfN,GACHL,EAAaD,EAAc,IAezB,oBAWDK,EAAMQ,KAAI,SAAAC,GAAI,OACb,oBACEN,UAAWC,IAAG,YACZ,CACEM,OAAQf,IAAgBc,IAH9B,SAOE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMX,EAAaa,IAJ9B,SAMGA,KAREA,MAYT,oBAAIN,UAAWC,IAAG,YAChB,CAAEC,SAAUH,IADd,SAGE,mBACE,UAAQ,WACRC,UAAU,YACVG,KAAK,QACL,gBAAeJ,EACfK,QAhDc,WACfL,GACHN,EAAaD,EAAc,IAyCzB,wBCnEFgB,EAAQzB,EAAW,EAAG,IACzBsB,KAAI,SAAAlB,GAAC,qBAAYA,MAEPsB,EAAgB,WAC3B,MAAsCC,mBAAiB,GAAvD,mBAAOlB,EAAP,KAAoBmB,EAApB,KACA,EAA8BD,mBAAiB,GAA/C,mBAAOnB,EAAP,KAAgBqB,EAAhB,KAGMtB,EAAgBkB,EAAMK,OAEtBC,EAAsBtB,EAAcD,EACpCwB,GAFyBvB,EAAc,GAAKD,EAET,EACnCyB,EAAiBF,EAAcxB,EAAQA,EAAQwB,EAC/CG,EAA4BlC,EAAWgC,EAAUC,GAOvD,OAJIxB,EAF0BG,KAAKC,KAAKN,EAAQC,IAG9CoB,EAAe,GAIf,sBAAKX,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWR,EADX,mBACiCuB,EADjC,cAC+CC,EAD/C,eAC4D1B,EAD5D,OAIA,sBAAKU,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRkB,GAAG,kBACHlB,UAAU,eACVmB,MAAO5B,EACP6B,SAAU,SAACC,GAAD,OAAOT,GAAaS,EAAEC,OAAOH,QALzC,SAvByB,CAAC,EAAG,EAAG,GAAI,IA8BlBd,KAAI,SAAAkB,GAAM,OACxB,wBACEJ,MAAOI,EACPC,SAAU,kBAAMZ,EAAWW,IAF7B,SAIGA,WAMT,uBAAOE,QAAQ,kBAAkBzB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEV,MAAOA,EACPC,QAASA,EACTC,YAAaA,EACbC,aAAc,SAACa,GAAD,OAAkBK,EAAeL,MAGjD,6BACGW,EAAgBZ,KAAI,SAAAqB,GAAI,OACvBA,GAAQpC,EACJ,oBAAI,UAAQ,OAAZ,wBAAuCoC,IAAfA,GACxB,YCnEdC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.eed9b0d9.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number;\n  onPageChange: (page: number) => void\n};\n\nexport const Pagination: React.FC<Props> = (\n  {\n    total,\n    perPage,\n    currentPage,\n    onPageChange,\n  },\n) => {\n  const maxPagesCount: number = Math.ceil(total / perPage);\n  const pages: number[] = getNumbers(1, maxPagesCount);\n\n  const isPrevPageDisabled: boolean = currentPage === 1;\n  const isNextPageDisabled: boolean = currentPage === maxPagesCount;\n\n  const prevPageClick = () => {\n    if (!isPrevPageDisabled) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  const nextPageClick = () => {\n    if (!isNextPageDisabled) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn('page-item',\n        { disabled: isPrevPageDisabled })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isPrevPageDisabled}\n          onClick={prevPageClick}\n        >\n          «\n        </a>\n      </li>\n\n      {pages.map(page => (\n        <li\n          className={cn('page-item',\n            {\n              active: currentPage === page,\n            })}\n          key={page}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n      <li className={cn('page-item',\n        { disabled: isNextPageDisabled })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isNextPageDisabled}\n          onClick={nextPageClick}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(5);\n\n  const perPageOptions: number[] = [3, 5, 10, 20];\n  const total: number = items.length;\n  const itemFromIndex: number = (currentPage - 1) * perPage;\n  const itemToIndex: number = currentPage * perPage;\n  const itemFrom: number = itemFromIndex + 1;\n  const itemTo: number = itemToIndex > total ? total : itemToIndex;\n  const paginationItems: number[] = getNumbers(itemFrom, itemTo);\n  const maxPagesCount: number = Math.ceil(total / perPage);\n\n  if (currentPage > maxPagesCount) {\n    setCurrentPage(1);\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${itemFrom} - ${itemTo} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(e) => setPerPage(+(e.target.value))}\n          >\n            {perPageOptions.map(option => (\n              <option\n                value={option}\n                onSelect={() => setPerPage(option)}\n              >\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={(page: number) => setCurrentPage(page)}\n      />\n\n      <ul>\n        {paginationItems.map(item => (\n          item <= total\n            ? <li data-cy=\"item\" key={item}>{`Item ${item}`}</li>\n            : ''\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}